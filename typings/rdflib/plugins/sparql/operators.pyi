"""
This type stub file was generated by pyright.
"""

from rdflib.plugins.sparql.parserutils import Expr
from rdflib import Literal, RDF, URIRef

"""
This contains evaluation functions for expressions

They get bound as instances-methods to the CompValue objects from parserutils
using setEvalFn

"""
RDF_langString = URIRef(RDF.uri + "langString")
def Builtin_IRI(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-iri
    """
    ...

def Builtin_isBLANK(expr, ctx):
    ...

def Builtin_isLITERAL(expr, ctx):
    ...

def Builtin_isIRI(expr, ctx):
    ...

def Builtin_isNUMERIC(expr, ctx):
    ...

def Builtin_BNODE(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-bnode
    """
    ...

def Builtin_ABS(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-abs
    """
    ...

def Builtin_IF(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-if
    """
    ...

def Builtin_RAND(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#idp2133952
    """
    ...

def Builtin_UUID(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strdt
    """
    ...

def Builtin_STRUUID(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strdt
    """
    ...

def Builtin_MD5(expr, ctx):
    ...

def Builtin_SHA1(expr, ctx):
    ...

def Builtin_SHA256(expr, ctx):
    ...

def Builtin_SHA384(expr, ctx):
    ...

def Builtin_SHA512(expr, ctx):
    ...

def Builtin_COALESCE(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-coalesce
    """
    ...

def Builtin_CEIL(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-ceil
    """
    ...

def Builtin_FLOOR(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-floor
    """
    ...

def Builtin_ROUND(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-round
    """
    ...

def Builtin_REGEX(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-regex
    Invokes the XPath fn:matches function to match text against a regular
    expression pattern.
    The regular expression language is defined in XQuery 1.0 and XPath 2.0
    Functions and Operators section 7.6.1 Regular Expression Syntax
    """
    ...

def Builtin_REPLACE(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-substr
    """
    ...

def Builtin_STRDT(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strdt
    """
    ...

def Builtin_STRLANG(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strlang
    """
    ...

def Builtin_CONCAT(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-concat
    """
    ...

def _compatibleStrings(a, b):
    ...

def Builtin_STRSTARTS(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strstarts
    """
    ...

def Builtin_STRENDS(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strends
    """
    ...

def Builtin_STRBEFORE(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strbefore
    """
    ...

def Builtin_STRAFTER(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strafter
    """
    ...

def Builtin_CONTAINS(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-strcontains
    """
    ...

def Builtin_ENCODE_FOR_URI(expr, ctx):
    ...

def Builtin_SUBSTR(expr, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-substr
    """
    ...

def Builtin_STRLEN(e, ctx):
    ...

def Builtin_STR(e, ctx):
    ...

def Builtin_LCASE(e, ctx):
    ...

def Builtin_LANGMATCHES(e, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-langMatches


    """
    ...

def Builtin_NOW(e, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-now
    """
    ...

def Builtin_YEAR(e, ctx):
    ...

def Builtin_MONTH(e, ctx):
    ...

def Builtin_DAY(e, ctx):
    ...

def Builtin_HOURS(e, ctx):
    ...

def Builtin_MINUTES(e, ctx):
    ...

def Builtin_SECONDS(e, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-seconds
    """
    ...

def Builtin_TIMEZONE(e, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-timezone

    :returns: the timezone part of arg as an xsd:dayTimeDuration.
    :raises: an error if there is no timezone.
    """
    ...

def Builtin_TZ(e, ctx):
    ...

def Builtin_UCASE(e, ctx):
    ...

def Builtin_LANG(e, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-lang

    Returns the language tag of ltrl, if it has one. It returns "" if ltrl has
    no language tag. Note that the RDF data model does not include literals
    with an empty language tag.
    """
    ...

def Builtin_DATATYPE(e, ctx):
    ...

def Builtin_sameTerm(e, ctx):
    ...

def Builtin_BOUND(e, ctx):
    """
    http://www.w3.org/TR/sparql11-query/#func-bound
    """
    ...

def Builtin_EXISTS(e, ctx):
    ...

def Function(e, ctx):
    """
    Custom functions (and casts!)
    """
    ...

def UnaryNot(expr, ctx):
    ...

def UnaryMinus(expr, ctx):
    ...

def UnaryPlus(expr, ctx):
    ...

def MultiplicativeExpression(e, ctx):
    ...

def AdditiveExpression(e, ctx):
    ...

def RelationalExpression(e, ctx):
    ...

def ConditionalAndExpression(e, ctx):
    ...

def ConditionalOrExpression(e, ctx):
    ...

def not_(arg):
    ...

def and_(*args):
    ...

TrueFilter = Expr('TrueFilter', lambda _1, _2: Literal(True))
def simplify(expr):
    ...

def literal(s):
    ...

def datetime(e):
    ...

def string(s):
    """
    Make sure the passed thing is a string literal
    i.e. plain literal, xsd:string literal or lang-tagged literal
    """
    ...

def numeric(expr):
    """
    return a number from a literal
    http://www.w3.org/TR/xpath20/#promotion

    or TypeError
    """
    ...

def EBV(rt):
    """
    * If the argument is a typed literal with a datatype of xsd:boolean,
      the EBV is the value of that argument.
    * If the argument is a plain literal or a typed literal with a
      datatype of xsd:string, the EBV is false if the operand value
      has zero length; otherwise the EBV is true.
    * If the argument is a numeric type or a typed literal with a datatype
      derived from a numeric type, the EBV is false if the operand value is
      NaN or is numerically equal to zero; otherwise the EBV is true.
    * All other arguments, including unbound arguments, produce a type error.

    """
    ...

def _lang_range_check(range, lang):
    """
    Implementation of the extended filtering algorithm, as defined in point
    3.3.2, of U{RFC 4647<http://www.rfc-editor.org/rfc/rfc4647.txt>}, on
    matching language ranges and language tags.
    Needed to handle the C{rdf:PlainLiteral} datatype.
    @param range: language range
    @param lang: language tag
    @rtype: boolean

        @author: U{Ivan Herman<a href="http://www.w3.org/People/Ivan/">}

        Taken from `RDFClosure/RestrictedDatatype.py`__

    .. __:http://dev.w3.org/2004/PythonLib-IH/RDFClosure/RestrictedDatatype.py

    """
    ...

