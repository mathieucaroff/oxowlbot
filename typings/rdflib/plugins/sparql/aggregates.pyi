"""
This type stub file was generated by pyright.
"""

class Accumulator(object):
    """abstract base class for different aggregation functions """
    def __init__(self, aggregation):
        self.var = ...
        self.expr = ...
    
    def dont_care(self, row):
        """skips distinct test """
        ...
    
    def use_row(self, row):
        """tests distinct with set """
        ...
    
    def set_value(self, bindings):
        """sets final value in bindings"""
        ...
    


class Counter(Accumulator):
    def __init__(self, aggregation):
        self.value = ...
    
    def update(self, row, aggregator):
        ...
    
    def get_value(self):
        ...
    
    def eval_row(self, row):
        ...
    
    def eval_full_row(self, row):
        ...
    
    def use_row(self, row):
        ...
    


def type_safe_numbers(*args):
    ...

class Sum(Accumulator):
    def __init__(self, aggregation):
        self.value = ...
        self.datatype = ...
    
    def update(self, row, aggregator):
        ...
    
    def get_value(self):
        ...
    


class Average(Accumulator):
    def __init__(self, aggregation):
        self.counter = ...
        self.sum = ...
        self.datatype = ...
    
    def update(self, row, aggregator):
        ...
    
    def get_value(self):
        ...
    


class Extremum(Accumulator):
    """abstract base class for Minimum and Maximum"""
    def __init__(self, aggregation):
        self.value = ...
        self.use_row = ...
    
    def set_value(self, bindings):
        ...
    
    def update(self, row, aggregator):
        ...
    


class Minimum(Extremum):
    def compare(self, val1, val2):
        ...
    


class Maximum(Extremum):
    def compare(self, val1, val2):
        ...
    


class Sample(Accumulator):
    """takes the first eligable value"""
    def __init__(self, aggregation):
        self.use_row = ...
    
    def update(self, row, aggregator):
        ...
    
    def get_value(self):
        ...
    


class GroupConcat(Accumulator):
    def __init__(self, aggregation):
        self.value = ...
        self.separator = ...
    
    def update(self, row, aggregator):
        ...
    
    def get_value(self):
        ...
    


class Aggregator(object):
    """combines different Accumulator objects"""
    accumulator_classes = ...
    def __init__(self, aggregations):
        self.bindings = ...
        self.accumulators = ...
    
    def update(self, row):
        """update all own accumulators"""
        ...
    
    def get_bindings(self):
        """calculate and set last values"""
        ...
    


