"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional
from rdflib.plugins.sparql import parser

"""
Converting the 'parse-tree' output of pyparsing to a SPARQL Algebra expression

http://www.w3.org/TR/sparql11-query/#sparqlQuery

"""
def OrderBy(p, expr):
    ...

def ToMultiSet(p):
    ...

def Union(p1, p2):
    ...

def Join(p1, p2):
    ...

def Minus(p1, p2):
    ...

def Graph(term, graph):
    ...

def BGP(triples: Optional[Any] = ...):
    ...

def LeftJoin(p1, p2, expr):
    ...

def Filter(expr, p):
    ...

def Extend(p, expr, var):
    ...

def Values(res):
    ...

def Project(p, PV):
    ...

def Group(p, expr: Optional[Any] = ...):
    ...

def _knownTerms(triple, varsknown, varscount):
    ...

def reorderTriples(l):
    """
    Reorder triple patterns so that we execute the
    ones with most bindings first
    """
    ...

def triples(l):
    ...

def translatePName(p, prologue):
    """
    Expand prefixed/relative URIs
    """
    ...

def translatePath(p):
    """
    Translate PropertyPath expressions
    """
    ...

def translateExists(e):
    """
    Translate the graph pattern used by EXISTS and NOT EXISTS
    http://www.w3.org/TR/sparql11-query/#sparqlCollectFilters
    """
    ...

def collectAndRemoveFilters(parts):
    """

    FILTER expressions apply to the whole group graph pattern in which
    they appear.

    http://www.w3.org/TR/sparql11-query/#sparqlCollectFilters
    """
    ...

def translateGroupOrUnionGraphPattern(graphPattern):
    ...

def translateGraphGraphPattern(graphPattern):
    ...

def translateInlineData(graphPattern):
    ...

def translateGroupGraphPattern(graphPattern):
    """
    http://www.w3.org/TR/sparql11-query/#convertGraphPattern
    """
    ...

class StopTraversal(Exception):
    def __init__(self, rv):
        self.rv = ...
    


def _traverse(e, visitPre=..., visitPost=...):
    """
    Traverse a parse-tree, visit each node

    if visit functions return a value, replace current node
    """
    ...

def _traverseAgg(e, visitor=...):
    """
    Traverse a parse-tree, visit each node

    if visit functions return a value, replace current node
    """
    ...

def traverse(tree, visitPre=..., visitPost=..., complete: Optional[Any] = ...):
    """
    Traverse tree, visit each node with visit function
    visit function may raise StopTraversal to stop traversal
    if complete!=None, it is returned on complete traversal,
    otherwise the transformed tree is returned
    """
    ...

def _hasAggregate(x):
    """
    Traverse parse(sub)Tree
    return true if any aggregates are used
    """
    ...

def _aggs(e, A):
    """
    Collect Aggregates in A
    replaces aggregates with variable references
    """
    ...

def _findVars(x, res):
    """
    Find all variables in a tree
    """
    ...

def _addVars(x, children):
    """
    find which variables may be bound by this part of the query
    """
    ...

def _sample(e, v: Optional[Any] = ...):
    """
    For each unaggregated variable V in expr
    Replace V with Sample(V)
    """
    ...

def _simplifyFilters(e):
    ...

def translateAggregates(q, M):
    ...

def translateValues(v):
    ...

def translate(q):
    """
    http://www.w3.org/TR/sparql11-query/#convertSolMod

    """
    ...

def simplify(n):
    """Remove joins to empty BGPs"""
    ...

def analyse(n, children):
    """
    Some things can be lazily joined.
    This propegates whether they can up the tree
    and sets lazy flags for all joins
    """
    ...

def translatePrologue(p, base, initNs: Optional[Any] = ..., prologue: Optional[Any] = ...):
    ...

def translateQuads(quads):
    ...

def translateUpdate1(u, prologue):
    ...

def translateUpdate(q, base: Optional[Any] = ..., initNs: Optional[Any] = ...):
    """
    Returns a list of SPARQL Update Algebra expressions
    """
    ...

def translateQuery(q, base: Optional[Any] = ..., initNs: Optional[Any] = ...):
    """
    Translate a query-parsetree to a SPARQL Algebra Expression

    Return a rdflib.plugins.sparql.sparql.Query object
    """
    ...

def pprintAlgebra(q):
    ...

if __name__ == '__main__':
    pq = parser.parseQuery(q)
    tq = translateQuery(pq)
