"""
This type stub file was generated by pyright.
"""

import weakref
from owlready2.namespace import *
from owlready2.entity import *
from typing import Any, Optional, cast

ContextVar: Any
_NEXT_DOMAIN_RANGE = ContextVar("_NEXT_DOMAIN_RANGE", default=None)
SymmetricProperty = cast(Any, ())
_default_class_property_type = ["some"]

def set_default_class_property_type(types): ...

class PropertyClass(EntityClass):
    _rdfs_is_a = ...
    _owl_equivalent = ...
    _owl_disjointwith = ...
    def __init__(Prop, name, bases, obj_dict): ...
    def _add_is_a_triple(Prop, base): ...
    def _del_is_a_triple(Prop, base): ...
    def get_domain(Prop): ...
    def set_domain(Prop, value): ...
    domain = ...
    def _domain_changed(Prop, old): ...
    def domains_indirect(Prop): ...
    def get_range(Prop): ...
    def set_range(Prop, value): ...
    range = ...
    def _range_changed(Prop, old): ...
    def get_range_iri(Prop): ...
    def set_range_iri(Prop, value): ...
    range_iri = ...
    def _range_iri_changed(Prop, old): ...
    def get_class_property_type(Prop): ...
    def set_class_property_type(Prop, value): ...
    class_property_type = ...
    def _class_property_type_changed(Prop, old): ...
    def get_property_chain(Prop): ...
    def set_property_chain(Prop, value): ...
    property_chain = ...
    def _property_chain_changed(Prop, old): ...
    def __getattr__(Prop, attr): ...
    def __setattr__(Class, attr, value): ...
    def get_python_name(Prop): ...
    def set_python_name(Prop, python_name): ...
    python_name = ...
    def some(Prop, value): ...
    def only(Prop, value): ...
    def value(Prop, value): ...
    def has_self(Prop, value: bool = ...): ...
    def exactly(Prop, nb, value: Optional[Any] = ...): ...
    def min(Prop, nb, value: Optional[Any] = ...): ...
    def max(Prop, nb, value: Optional[Any] = ...): ...
    def __lt__(prop, value): ...
    def __le__(prop, value): ...
    def __gt__(prop, value): ...
    def __ge__(prop, value): ...
    def _get_value_for_individual(Prop, entity): ...
    def _get_values_for_individual(Prop, entity): ...
    _get_value_for_class = ...
    _get_values_for_class = ...
    def _get_indirect_value_for_individual(Prop, entity): ...
    def _get_indirect_values_for_individual(Prop, entity): ...
    def _get_indirect_value_for_class(Prop, entity): ...
    _get_indirect_values_for_class = ...
    def _set_value_for_individual(Prop, entity, value): ...
    _set_value_for_class = ...
    def _set_values_for_individual(Prop, entity, values): ...
    _set_values_for_class = ...
    def __getitem__(Prop, entity): ...
    def __setitem__(Prop, entity, value): ...

_FUNCTIONAL_FOR_CACHE = weakref.WeakKeyDictionary()
RESTRICTIONS_AS_FUNCTIONAL_PROPERTIES = False

class Property(metaclass=PropertyClass):
    namespace = ...
    _inverse_storid = ...
    @classmethod
    def is_functional_for(Prop, Class, force_restriction: bool = ...): ...
    @classmethod
    def get_relations(Prop): ...

class ReasoningPropertyClass(PropertyClass):
    def __init__(Prop, name, bases, obj_dict): ...
    def set_python_name(Prop, python_name): ...
    python_name = ...

class ObjectPropertyClass(ReasoningPropertyClass):
    _owl_type = ...
    def __init__(Prop, name, bases, obj_dict): ...
    def get_inverse_property(Prop): ...
    def set_inverse_property(Prop, value): ...
    inverse_property = ...
    def _class_is_a_changed(Prop, old): ...
    def _get_value_for_individual(Prop, entity): ...
    def _get_inverse_value_for_individual(Prop, entity): ...
    def _get_value_for_class(Prop, entity): ...
    def _get_values_for_individual(Prop, entity): ...
    def _get_inverse_values_for_individual(Prop, entity): ...
    def _get_values_for_class(Prop, entity): ...
    def _get_indirect_values_for_individual(Prop, entity): ...
    def _get_indirect_values_for_class(
        Prop, entity, transitive_exclude_self: bool = ...
    ): ...
    def _set_value_for_individual(Prop, entity, value): ...
    def _set_value_for_class(Prop, entity, value): ...

class ObjectProperty(Property, metaclass=ObjectPropertyClass):
    namespace = ...

class DataPropertyClass(ReasoningPropertyClass):
    _owl_type = ...
    inverse_property = ...
    def _get_value_for_individual(Prop, entity): ...
    def _get_value_for_class(Prop, entity): ...
    def _get_values_for_individual(Prop, entity): ...
    def _get_values_for_class(Prop, entity): ...
    def _get_indirect_value_for_individual(Prop, entity): ...
    def _get_indirect_value_for_class(Prop, entity): ...
    def _get_indirect_values_for_individual(Prop, entity): ...
    def _get_indirect_values_for_class(Prop, entity): ...
    def _set_value_for_individual(Prop, entity, value): ...
    def _set_value_for_class(Prop, entity, value): ...

class DatatypeProperty(Property, metaclass=DataPropertyClass):
    namespace = ...

DataProperty = DatatypeProperty

class FunctionalProperty(Property):
    namespace = ...
    @classmethod
    def is_functional_for(Prop, o): ...

class InverseFunctionalProperty(Property):
    namespace = ...

class TransitiveProperty(Property):
    namespace = ...

class SymmetricProperty(Property):
    namespace = ...

class AsymmetricProperty(Property):
    namespace = ...

class ReflexiveProperty(Property):
    namespace = ...

class IrreflexiveProperty(Property):
    namespace = ...

_CLASS_PROPS = DataProperty, ObjectProperty
_TYPE_PROPS = (
    FunctionalProperty,
    InverseFunctionalProperty,
    TransitiveProperty,
    SymmetricProperty,
    AsymmetricProperty,
    ReflexiveProperty,
    IrreflexiveProperty,
)

def destroy_entity(e, undoable: bool = ...): ...

class bottomObjectProperty(ObjectProperty): ...
class bottomDataProperty(DataProperty): ...

def _property_value_restrictions(x, Prop): ...
def _inherited_properties_value_restrictions(x, Props, already): ...
def _flatten_only(r): ...
def _most_specific(s): ...

class IndividualValueList(CallbackListWithLanguage):
    __slots__ = ...
    def __init__(self, l, obj, Prop): ...
    def indirect(self): ...
    def _callback(self, obj, old): ...

class FunctionalIndividualValueList(IndividualValueList):
    __slots__ = ...
    def _callback(self, obj, old): ...

class InverseIndividualValueList(CallbackListWithLanguage):
    __slots__ = ...
    def __init__(self, l, obj, Prop): ...
    def indirect(self): ...
    def _callback(self, obj, old): ...

class ClassValueList(CallbackListWithLanguage):
    __slots__ = ...
    def __init__(self, l, obj, Prop): ...
    def _callback(self, obj, old): ...
    def indirect(self): ...
