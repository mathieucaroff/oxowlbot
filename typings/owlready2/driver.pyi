"""
This type stub file was generated by pyright.
"""

from owlready2.base import *
from typing import Any, Optional

owlready2_optimized = None
INT_DATATYPES = "http://www.w3.org/2001/XMLSchema#integer", "http://www.w3.org/2001/XMLSchema#byte", "http://www.w3.org/2001/XMLSchema#short", "http://www.w3.org/2001/XMLSchema#int", "http://www.w3.org/2001/XMLSchema#long", "http://www.w3.org/2001/XMLSchema#unsignedByte", "http://www.w3.org/2001/XMLSchema#unsignedShort", "http://www.w3.org/2001/XMLSchema#unsignedInt", "http://www.w3.org/2001/XMLSchema#unsignedLong", "http://www.w3.org/2001/XMLSchema#negativeInteger", "http://www.w3.org/2001/XMLSchema#nonNegativeInteger", "http://www.w3.org/2001/XMLSchema#positiveInteger"
FLOAT_DATATYPES = "http://www.w3.org/2001/XMLSchema#decimal", "http://www.w3.org/2001/XMLSchema#double", "http://www.w3.org/2001/XMLSchema#float", "http://www.w3.org/2002/07/owl#real"
class BaseGraph(object):
  _SUPPORT_CLONING = ...
  BASE_METHODS = ...
  WORLD_METHODS = ...
  ONTO_METHODS = ...
  def sub_graph(self, user_context):
    ...
  
  def context_2_user_context(self, context):
    ...
  
  def parse(self, f):
    ...
  
  def save(self, f, format=..., filter: Optional[Any] = ...):
    ...
  
  def _abbreviate(self, iri, create_if_missing: bool = ...):
    ...
  
  def _unabbreviate(self, iri):
    ...
  
  def _get_obj_triples_transitive_sp(self, s, p, already: Optional[Any] = ...):
    ...
  
  def _get_obj_triples_transitive_po(self, p, o, already: Optional[Any] = ...):
    ...
  
  def _get_obj_triples_transitive_sym(self, s, p, already: Optional[Any] = ...):
    ...
  
  def _get_obj_triples_transitive_sp_indirect(self, s, predicates_inverses, already: Optional[Any] = ...):
    ...
  
  def dump(self, format=..., file: Optional[Any] = ...):
    ...
  
  def __bool__(self):
    ...
  


class BaseMainGraph(BaseGraph):
  def parse(self, f):
    ...
  
  def save(self, f, format=..., **kargs):
    ...
  


class BaseSubGraph(BaseGraph):
  def __init__(self, parent, onto):
    self.parent = ...
    self.onto = ...
  
  def parse(self, f, format: Optional[Any] = ..., delete_existing_triples: bool = ..., default_base=...):
    ...
  
  def save(self, f, format=..., commit: bool = ..., **kargs):
    ...
  


def _guess_format(f):
  ...

def _save(f, format, graph, filter: Optional[Any] = ...):
  ...

