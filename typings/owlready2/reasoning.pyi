"""
This type stub file was generated by pyright.
"""

import os
import re
from owlready2.base import *
from owlready2.prop import *
from owlready2.namespace import *
from owlready2.class_construct import *
from owlready2.individual import *
from typing import Any, Optional

# pyright: reportInvalidStringEscapeSequence: false

_HERMIT_RESULT_REGEXP = re.compile(
    "^([A-Za-z]+)\\( ((?:<(?:[^>]+)>\\s*)+) \\)$", re.MULTILINE
)
_HERMIT_PROP_REGEXP = re.compile(
    "^<([^>]+)> \\(known instances:\\s*(.*?)(?:\\s*\\|\\s*)possible instances:\\s*(.*?)\\s*\\)",
    re.MULTILINE,
)
_PELLET_PROP_REGEXP = re.compile("^PROPINST: ([^ ]+) ([^ ]+) ([^ ]+)$", re.MULTILINE)
_PELLET_DATA_PROP_REGEXP = re.compile(
    "^DATAPROPVAL: ([^ ]+) ([^ ]+) literal\\((.*?),(.*?),(.*?)\\)$", re.MULTILINE
)
_HERE = os.path.dirname(__file__)
_HERMIT_CLASSPATH = os.pathsep.join(
    [os.path.join(_HERE, "hermit"), os.path.join(_HERE, "hermit", "HermiT.jar")]
)
_PELLET_CLASSPATH = os.pathsep.join(
    os.path.join(_HERE, "pellet", p)
    for p in os.listdir(os.path.join(_HERE, "pellet"))
    if p.endswith(".jar")
)
_HERMIT_2_OWL = {
    "SubClassOf": rdfs_subclassof,
    "SubPropertyOf": rdfs_subpropertyof,
    "SubObjectPropertyOf": rdfs_subpropertyof,
    "SubDataPropertyOf": rdfs_subpropertyof,
    "Type": rdf_type,
    "EquivalentClasses": owl_equivalentclass,
    "EquivalentObjectProperties": owl_equivalentproperty,
    "EquivalentDataProperties": owl_equivalentproperty,
}
_OWL_2_TYPE = {
    rdfs_subclassof: "class",
    rdfs_subpropertyof: "property",
    rdf_type: "individual",
    owl_equivalentclass: "class",
    owl_equivalentproperty: "property",
    owl_equivalentindividual: "individual",
}
_TYPE_2_IS_A = {
    "class": rdfs_subclassof,
    "property": rdfs_subpropertyof,
    "individual": rdf_type,
}
_TYPE_2_EQUIVALENT_TO = {
    "class": owl_equivalentclass,
    "property": owl_equivalentproperty,
    "individual": owl_equivalentindividual,
}
_INFERRENCES_ONTOLOGY = "http://inferrences/"
_IS_A_RELATIONS = "SubClassOf", "SubObjectPropertyOf", "SubDataPropertyOf", "Type"
_EQUIV_RELATIONS = (
    "EquivalentClasses",
    "EquivalentObjectProperties",
    "EquivalentDataProperties",
)
_TYPES = (
    FunctionalProperty,
    InverseFunctionalProperty,
    TransitiveProperty,
    SymmetricProperty,
    AsymmetricProperty,
    ReflexiveProperty,
    IrreflexiveProperty,
)

def _keep_most_specific(s, consider_equivalence: bool = ...): ...
def sync_reasoner_hermit(
    x: Optional[Any] = ...,
    infer_property_values: bool = ...,
    debug=...,
    keep_tmp_file: bool = ...,
): ...

sync_reasoner = sync_reasoner_hermit

def sync_reasoner_pellet(
    x: Optional[Any] = ...,
    infer_property_values: bool = ...,
    infer_data_property_values: bool = ...,
    debug=...,
    keep_tmp_file: bool = ...,
): ...
def _apply_reasoning_results(
    world, ontology, debug, new_parents, new_equivs, entity_2_type
): ...
def _apply_inferred_obj_relations(world, ontology, debug, relations): ...
def _apply_inferred_data_relations(world, ontology, debug, relations): ...
