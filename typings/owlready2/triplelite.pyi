"""
This type stub file was generated by pyright.
"""

from owlready2.base import *
from owlready2.driver import BaseMainGraph, BaseSubGraph
from owlready2.util import _LazyListMixin
from typing import Any, Optional

def all_combinations(l):
  """returns all the combinations of the sublist in the given list (i.e. l[0] x l[1] x ... x l[n])."""
  ...

class Graph(BaseMainGraph):
  _SUPPORT_CLONING = ...
  def __init__(self, filename, clone: Optional[Any] = ..., exclusive: bool = ..., sqlite_tmp_dir=..., world: Optional[Any] = ..., profiling: bool = ...):
    self.c_2_onto = ...
    self.onto_2_subgraph = ...
    self.last_numbered_iri = ...
    self.world = ...
    self.c = ...
    self.lock = ...
    self.lock_level = ...
    self.current_changes = ...
  
  def set_indexed(self, indexed):
    ...
  
  def close(self):
    ...
  
  def acquire_write_lock(self):
    ...
  
  def release_write_lock(self):
    ...
  
  def has_write_lock(self):
    ...
  
  def select_abbreviate_method(self):
    ...
  
  def fix_base_iri(self, base_iri, c: Optional[Any] = ...):
    ...
  
  def sub_graph(self, onto):
    ...
  
  def ontologies_iris(self):
    ...
  
  def _abbreviate_sql(self, iri, create_if_missing: bool = ...):
    ...
  
  def _unabbreviate_sql(self, storid):
    ...
  
  def _abbreviate_dict(self, iri, create_if_missing: bool = ...):
    ...
  
  def _unabbreviate_dict(self, storid):
    ...
  
  def get_storid_dict(self):
    ...
  
  def _new_numbered_iri(self, prefix):
    ...
  
  def _refactor_sql(self, storid, new_iri):
    ...
  
  def _refactor_dict(self, storid, new_iri):
    ...
  
  def commit(self):
    ...
  
  def context_2_user_context(self, c):
    ...
  
  def new_blank_node(self):
    ...
  
  def _get_obj_triples_spo_spo(self, s, p, o):
    ...
  
  def _get_data_triples_spod_spod(self, s, p, o, d):
    ...
  
  def _get_triples_spod_spod(self, s, p, o, d):
    ...
  
  def _get_obj_triples_cspo_cspo(self, c, s, p, o):
    ...
  
  def _get_obj_triples_sp_co(self, s, p):
    ...
  
  def _get_triples_s_p(self, s):
    ...
  
  def _get_obj_triples_o_p(self, o):
    ...
  
  def _get_obj_triples_s_po(self, s):
    ...
  
  def _get_obj_triples_sp_o(self, s, p):
    ...
  
  def _get_data_triples_sp_od(self, s, p):
    ...
  
  def _get_triples_sp_od(self, s, p):
    ...
  
  def _get_data_triples_s_pod(self, s):
    ...
  
  def _get_triples_s_pod(self, s):
    ...
  
  def _get_obj_triples_po_s(self, p, o):
    ...
  
  def _get_obj_triples_spi_o(self, s, p, i):
    ...
  
  def _get_obj_triples_pio_s(self, p, i, o):
    ...
  
  def _get_obj_triple_sp_o(self, s, p):
    ...
  
  def _get_triple_sp_od(self, s, p):
    ...
  
  def _get_data_triple_sp_od(self, s, p):
    ...
  
  def _get_obj_triple_po_s(self, p, o):
    ...
  
  def _has_obj_triple_spo(self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ...):
    ...
  
  def _has_data_triple_spod(self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ..., d: Optional[Any] = ...):
    ...
  
  def _del_obj_triple_raw_spo(self, s, p, o):
    ...
  
  def _del_data_triple_raw_spod(self, s, p, o, d):
    ...
  
  def _punned_entities(self):
    ...
  
  def __bool__(self):
    ...
  
  def __len__(self):
    ...
  
  def _get_obj_triples_transitive_sp(self, s, p):
    ...
  
  def _get_obj_triples_transitive_po(self, p, o):
    ...
  
  def _destroy_collect_storids(self, destroyed_storids, modified_relations, storid):
    ...
  
  def _rdf_list_analyze(self, blank):
    ...
  
  def restore_iri(self, storid, iri):
    ...
  
  def destroy_entity(self, storid, destroyer, relation_updater, undoer_objs: Optional[Any] = ..., undoer_datas: Optional[Any] = ...):
    ...
  
  def _iter_ontology_iri(self, c: Optional[Any] = ...):
    ...
  
  def _iter_triples(self, quads: bool = ..., sort_by_s: bool = ..., c: Optional[Any] = ...):
    ...
  
  def get_fts_prop_storid(self):
    ...
  
  def enable_full_text_search(self, prop_storid):
    ...
  
  def disable_full_text_search(self, prop_storid):
    ...
  


class SubGraph(BaseSubGraph):
  def __init__(self, parent, onto, c, db):
    self.c = ...
    self.db = ...
    self.execute = ...
  
  def create_parse_func(self, filename: Optional[Any] = ..., delete_existing_triples: bool = ..., datatype_attr=...):
    ...
  
  def context_2_user_context(self, c):
    ...
  
  def add_ontology_alias(self, iri, alias):
    ...
  
  def get_last_update_time(self):
    ...
  
  def set_last_update_time(self, t):
    ...
  
  def destroy(self):
    ...
  
  def _set_obj_triple_raw_spo(self, s, p, o):
    ...
  
  def _add_obj_triple_raw_spo(self, s, p, o):
    ...
  
  def _del_obj_triple_raw_spo(self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ...):
    ...
  
  def _set_data_triple_raw_spod(self, s, p, o, d):
    ...
  
  def _add_data_triple_raw_spod(self, s, p, o, d):
    ...
  
  def _del_data_triple_raw_spod(self, s, p, o, d):
    ...
  
  def _has_obj_triple_spo(self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ...):
    ...
  
  def _has_data_triple_spod(self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ..., d: Optional[Any] = ...):
    ...
  
  def _get_obj_triples_spo_spo(self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ...):
    ...
  
  def _get_data_triples_spod_spod(self, s, p, o, d=...):
    ...
  
  def _get_triples_spod_spod(self, s, p, o, d=...):
    ...
  
  def _get_obj_triples_s_po(self, s):
    ...
  
  def _get_obj_triples_sp_o(self, s, p):
    ...
  
  def _get_obj_triples_sp_co(self, s, p):
    ...
  
  def _get_triples_sp_od(self, s, p):
    ...
  
  def _get_data_triples_sp_od(self, s, p):
    ...
  
  def _get_data_triples_s_pod(self, s):
    ...
  
  def _get_triples_s_pod(self, s):
    ...
  
  def _get_obj_triples_po_s(self, p, o):
    ...
  
  def _get_obj_triples_spi_o(self, s, p, i):
    ...
  
  def _get_obj_triples_pio_s(self, p, i, o):
    ...
  
  def _get_obj_triple_sp_o(self, s, p):
    ...
  
  def _get_triple_sp_od(self, s, p):
    ...
  
  def _get_data_triple_sp_od(self, s, p):
    ...
  
  def _get_obj_triple_po_s(self, p, o):
    ...
  
  def _get_triples_s_p(self, s):
    ...
  
  def _get_obj_triples_o_p(self, o):
    ...
  
  def _get_obj_triples_cspo_cspo(self, c, s, p, o):
    ...
  
  def search(self, prop_vals, c: Optional[Any] = ..., debug: bool = ...):
    ...
  
  def __len__(self):
    ...
  
  def _iter_ontology_iri(self, c: Optional[Any] = ...):
    ...
  
  def _iter_triples(self, quads: bool = ..., sort_by_s: bool = ...):
    ...
  
  def _refactor(self, storid, new_iri):
    ...
  
  def _get_obj_triples_transitive_sp(self, s, p):
    ...
  
  def _get_obj_triples_transitive_po(self, p, o):
    ...
  


class _SearchMixin(list):
  __slots__ = ...
  def sql_request(self):
    ...
  
  def _do_search(self):
    ...
  
  _populate = ...
  def first(self):
    ...
  
  def _do_search_rdf(self):
    ...
  
  def __len__(self):
    ...
  


class _PopulatedSearchList(FirstList):
  __slots__ = ...


_NEXT_SEARCH_ID = 0
class _SearchList(FirstList, _SearchMixin, _LazyListMixin):
  __slots__ = ...
  _PopulatedClass = ...
  def __init__(self, world, prop_vals, c: Optional[Any] = ..., case_sensitive: bool = ...):
    self.world = ...
    self.prop_vals = ...
    self.id = ...
    self.tables = ...
    self.transits = ...
    self.conditions = ...
    self.params = ...
    self.alternatives = ...
    self.excepts = ...
    self.except_conditions = ...
    self.except_params = ...
    self.nested_searchs = ...
  
  def sql_components(self, last_request: bool = ...):
    ...
  
  def __or__(self, other):
    ...
  
  def dump(self):
    ...
  


class _PopulatedUnionSearchList(FirstList):
  __slots__ = ...


class _UnionSearchList(FirstList, _SearchMixin, _LazyListMixin):
  __slots__ = ...
  _PopulatedClass = ...
  nested_searchs = ...
  def __init__(self, world, searches):
    self.world = ...
    self.searches = ...
  
  def sql_components(self, last_request: bool = ...):
    ...
  
  def __or__(self, other):
    ...
  
  def dump(self):
    ...
  
  def explode(self, gen):
    ...
  


