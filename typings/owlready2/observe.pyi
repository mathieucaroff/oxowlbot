"""
This type stub file was generated by pyright.
"""

from owlready2.namespace import Ontology
from typing import Any, Optional

__all__ = ["start_observing", "stop_observing", "observe", "unobserve", "isobserved", "send_event", "scan_collapsed_changes", "InstancesOfClass"]
class ObservedOntology(Ontology):
  def _get_pred_value_obj(self, subject, predicate):
    ...
  
  def _get_pred_value_data(self, subject, predicate):
    ...
  
  def _gen_triple_method_obj(self, triple_method):
    ...
  
  def _gen_triple_method_data(self, triple_method):
    ...
  
  def _entity_destroyed(self, entity):
    ...
  


def start_observing(onto):
  ...

def stop_observing(onto):
  ...

_NON_EMPTY_COLLAPSED_LISTENERS = set()
class Observation(object):
  def __init__(self, o):
    self.listeners = ...
    self.collapsed_listeners = ...
    self.o = ...
    self.collapsed_changes = ...
  
  def call(self, predicate):
    ...
  
  def add_listener(self, listener, collapsed):
    ...
  
  def remove_listener(self, listener):
    ...
  
  def collapser(self, o, predicate):
    ...
  
  def scan(self):
    ...
  


class ObjectPack(object):
  storid = ...
  def __init__(self, objects):
    ...
  
  def __repr__(self):
    ...
  


def scan_collapsed_changes():
  ...

def observe(o, listener, collapsed: bool = ..., world: Optional[Any] = ...):
  ...

def isobserved(o, listener: Optional[Any] = ..., world: Optional[Any] = ...):
  ...

def send_event(o, pred, world: Optional[Any] = ...):
  ...

def unobserve(o, listener: Optional[Any] = ..., world: Optional[Any] = ...):
  ...

_INSTANCES_OF_CLASS = {  }
class StoridList(object):
  def __init__(self, graph_manager, storids):
    self.namespace = ...
  
  def _update(self):
    ...
  
  def __len__(self):
    ...
  
  def __iter__(self):
    ...
  
  def __getitem__(self, i):
    ...
  
  def __repr__(self):
    ...
  


class InstancesOfClass(StoridList):
  storid = ...
  def __init__(self, Class, onto: Optional[Any] = ..., order_by=..., lang=..., use_observe: bool = ...):
    ...
  
  def __repr__(self):
    ...
  
  def _update(self):
    ...
  
  def _get_storids(self):
    ...
  
  def _get_old_value(self):
    ...
  
  def _changed(self):
    ...
  
  def add(self, o):
    ...
  
  append = ...
  def remove(self, o):
    ...
  


