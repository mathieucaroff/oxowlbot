"""
This type stub file was generated by pyright.
"""

from owlready2.base import *
from owlready2.triplelite import *
from typing import Any, Optional

ContextVar: Any
CURRENT_NAMESPACES = ContextVar("CURRENT_NAMESPACES", default=None)
_LOG_LEVEL = 0

def set_log_level(x): ...

class Namespace(object):
    def __init__(self, world_or_ontology, base_iri, name: Optional[Any] = ...):
        self.base_iri = ...
        self.name = ...
    def __enter__(self): ...
    def __exit__(
        self,
        exc_type: Optional[Any] = ...,
        exc_val: Optional[Any] = ...,
        exc_tb: Optional[Any] = ...,
    ): ...
    def __repr__(self): ...
    def __getattr__(self, attr): ...
    def __getitem__(self, name): ...

class _GraphManager(object):
    def _abbreviate(self, iri, create_if_missing: bool = ...): ...
    def _unabbreviate(self, abb): ...
    def _get_obj_triple_sp_o(self, subject, predicate): ...
    def _get_obj_triple_po_s(self, predicate, object): ...
    def _get_obj_triples_sp_o(self, subject, predicate): ...
    def _get_obj_triples_po_s(self, predicate, object): ...
    def _get_data_triples_sp_od(self, subject, predicate): ...
    def _get_obj_triples_transitive_sp(
        self, subject, predicate, already: Optional[Any] = ...
    ): ...
    def _get_obj_triples_transitive_po(
        self, predicate, object, already: Optional[Any] = ...
    ): ...
    def _get_obj_triples_transitive_sym(self, subject, predicate): ...
    def _get_obj_triples_transitive_sp_indirect(
        self, subject, predicates_inverses, already: Optional[Any] = ...
    ): ...
    def _get_obj_triples_spo_spo(
        self,
        subject: Optional[Any] = ...,
        predicate: Optional[Any] = ...,
        object: Optional[Any] = ...,
    ): ...
    _get_triples_s_p = ...
    def _has_data_triple_spod(
        self,
        subject: Optional[Any] = ...,
        predicate: Optional[Any] = ...,
        object: Optional[Any] = ...,
        d: Optional[Any] = ...,
    ): ...
    _has_obj_triple_spo = ...
    def _get_obj_triples_cspo(
        self,
        subject: Optional[Any] = ...,
        predicate: Optional[Any] = ...,
        object: Optional[Any] = ...,
        ontology_graph: Optional[Any] = ...,
    ): ...
    def _get_obj_triples_sp_o(self, subject, predicate): ...
    def _get_obj_triples_sp_co(self, s, p): ...
    def _get_triples_sp_od(self, s, p): ...
    def get_triples(
        self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ...
    ): ...
    def _refactor(self, storid, new_iri): ...
    def _get_annotation_axioms(self, source, property, target, target_d): ...
    def _del_obj_triple_spo(
        self, s: Optional[Any] = ..., p: Optional[Any] = ..., o: Optional[Any] = ...
    ): ...
    def _del_data_triple_spod(
        self,
        s: Optional[Any] = ...,
        p: Optional[Any] = ...,
        o: Optional[Any] = ...,
        d: Optional[Any] = ...,
    ): ...
    def _parse_list(self, bnode): ...
    def _parse_list_as_rdf(self, bnode): ...
    def _to_python(
        self,
        o,
        d: Optional[Any] = ...,
        main_type: Optional[Any] = ...,
        main_onto: Optional[Any] = ...,
        default_to_none: bool = ...,
    ): ...
    def _to_rdf(self, o): ...
    def classes(self): ...
    def inconsistent_classes(self): ...
    def data_properties(self): ...
    def object_properties(self): ...
    def annotation_properties(self): ...
    def properties(self): ...
    def individuals(self): ...
    def variables(self): ...
    def rules(self): ...
    def disjoint_classes(self): ...
    def disjoint_properties(self): ...
    def different_individuals(self): ...
    def disjoints(self): ...
    def general_axioms(self): ...
    def search(
        self, _use_str_as_loc_str: bool = ..., _case_sensitive: bool = ..., **kargs
    ): ...
    def search_one(self, **kargs): ...

onto_path = []
owl_world = None
_cache = [None] * 2 ** 16
_cache_index = 0

def _cache_entity(entity): ...
def _clear_cache(): ...

class World(_GraphManager):
    def __init__(self, backend=..., filename=..., dbname=..., **kargs):
        self.world = ...
        self.filename = ...
        self.ontologies = ...
        self.graph = ...
    def set_backend(self, backend=..., filename=..., dbname=..., **kargs):
        self.filename = ...
    def close(self): ...
    def get_full_text_search_properties(self): ...
    def set_full_text_search_properties(self, l): ...
    full_text_search_properties = ...
    def _full_text_search_changed(self, old): ...
    def new_blank_node(self): ...
    def save(self, file: Optional[Any] = ..., format=..., **kargs): ...
    def as_rdflib_graph(self): ...
    def sparql_query(self, sparql, *args, **kargs): ...
    def get_ontology(self, base_iri): ...
    def get_namespace(self, base_iri, name=...): ...
    def get(self, iri, default: Optional[Any] = ...): ...
    def get_if_loaded(self, iri): ...
    def __getitem__(self, iri): ...
    def _get_by_storid(
        self,
        storid,
        full_iri: Optional[Any] = ...,
        main_type: Optional[Any] = ...,
        main_onto: Optional[Any] = ...,
        trace: Optional[Any] = ...,
        default_to_none: bool = ...,
    ): ...
    def _load_by_storid(
        self,
        storid,
        full_iri: Optional[Any] = ...,
        main_type: Optional[Any] = ...,
        main_onto: Optional[Any] = ...,
        default_to_none: bool = ...,
        trace: Optional[Any] = ...,
    ): ...
    def _parse_bnode(self, bnode): ...

class Ontology(Namespace, _GraphManager):
    def __init__(self, world, base_iri, name: Optional[Any] = ...):
        self.world = ...
        self.loaded = ...
        self.storid = ...
        self.metadata = ...
    def destroy(self): ...
    def _entity_destroyed(self, entity): ...
    def get_imported_ontologies(self): ...
    def set_imported_ontologies(self, l): ...
    imported_ontologies = ...
    def get_python_module(self): ...
    def set_python_module(self, module_name): ...
    python_module = ...
    def _import_changed(self, old): ...
    def get_namespace(self, base_iri, name=...): ...
    def __exit__(
        self,
        exc_type: Optional[Any] = ...,
        exc_val: Optional[Any] = ...,
        exc_tb: Optional[Any] = ...,
    ): ...
    def _destroy_cached_entities(self): ...
    def load(
        self,
        only_local: bool = ...,
        fileobj: Optional[Any] = ...,
        reload: bool = ...,
        reload_if_newer: bool = ...,
        **args
    ):
        self.loaded = ...
    def _load_properties(self): ...
    def indirectly_imported_ontologies(self, already: Optional[Any] = ...): ...
    def save(self, file: Optional[Any] = ..., format=..., **kargs): ...
    def _add_obj_triple_spo(self, s, p, o): ...
    def _set_obj_triple_spo(self, s, p, o): ...
    def _add_data_triple_spod(self, s, p, o, d): ...
    def _set_data_triple_spod(self, s, p, o, d): ...
    def _add_obj_triple_raw_spo(self, subject, predicate, object): ...
    def _set_obj_triple_raw_spo(self, subject, predicate, object): ...
    def _del_obj_triple_raw_spo(self, subject, predicate, object): ...
    def _add_data_triple_raw_spodsd(self, subject, predicate, object, d): ...
    def _set_data_triple_raw_spodsd(self, subject, predicate, object, d): ...
    def _del_data_triple_raw_spodsd(self, subject, predicate, object, d): ...
    def _add_annotation_axiom(
        self, source, property, target, target_d, annot, value, d
    ): ...
    def _del_annotation_axiom(
        self, source, property, target, target_d, annot, value, d
    ): ...
    def _reload_bnode(self, bnode): ...
    def _parse_bnode(self, bnode): ...
    def _del_list(self, bnode): ...
    def _set_list(self, bnode, l): ...
    def _set_list_as_rdf(self, bnode, l): ...
    def __repr__(self): ...
    def get_parents_of(self, entity): ...
    def get_instances_of(self, Class): ...
    def get_children_of(self, Class): ...

class Metadata(object):
    def __init__(self, namespace, storid): ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, values): ...

def _open_onto_file(base_iri, name, mode=..., only_local: bool = ...): ...
def _get_onto_file(base_iri, name, mode=..., only_local: bool = ...): ...

owl_world = World(filename=None)
rdf = owl_world.get_ontology("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
rdfs = owl_world.get_ontology("http://www.w3.org/2000/01/rdf-schema#")
owl = owl_world.get_ontology("http://www.w3.org/2002/07/owl#")
owlready = owl_world.get_ontology(
    "http://www.lesfleursdunormal.fr/static/_downloads/owlready_ontology.owl#"
)
anonymous = owl_world.get_ontology("http://anonymous/")
