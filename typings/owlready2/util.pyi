"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class FTS(str):
    __slots__ = ...
    def __new__(cls, s, lang=...): ...
    def __init__(self, s, lang=...):
        self.lang = ...

class NumS(object):
    _OPERATORS = ...
    def __init__(self, *operators_and_values):
        self.operators_and_values = ...

class normstr(str):
    __slots__ = ...

class locstr(str):
    __slots__ = ...
    def __new__(cls, s, lang=...): ...
    def __init__(self, s, lang=...):
        self.lang = ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class FirstList(list):
    __slots__ = ...
    def first(self): ...

class CallbackList(FirstList):
    __slots__ = ...
    def __init__(self, l, obj, callback): ...
    def _set(self, l): ...
    def _append(self, x): ...
    def _remove(self, x): ...
    def _replace(self, old, new): ...
    def reinit(self, l): ...
    def append(self, x): ...
    def insert(self, i, x): ...
    def extend(self, l): ...
    def remove(self, x): ...
    def __delitem__(self, i): ...
    def __setitem__(self, i, x): ...
    def __delslice__(self, i): ...
    def __setslice__(self, i, x): ...
    def __iadd__(self, x): ...
    def __imul__(self, x): ...
    def pop(self, i): ...
    def clear(self): ...

class LanguageSublist(CallbackList):
    __slots__ = ...
    def __init__(self, l, lang): ...
    def _callback(self, obj, old): ...
    def reinit(self, l): ...

class CallbackListWithLanguage(CallbackList):
    __slots__ = ...
    def __getattr__(self, attr): ...
    def __setattr__(self, attr, values): ...

class _LazyListMixin(list):
    __slots__ = ...
    _PopulatedClass = ...
    def __init__(self): ...
    def _populate(self): ...
    def __repr__(self):
        self.__class__ = ...
    def __str__(self):
        self.__class__ = ...
    def __iter__(self):
        self.__class__ = ...
    def __len__(self):
        self.__class__ = ...
    def __eq__(self, o):
        self.__class__ = ...
    def __ne__(self, o):
        self.__class__ = ...
    def __getitem__(self, i):
        self.__class__ = ...
    def __delitem__(self, i):
        self.__class__ = ...
    def __setitem__(self, i, x):
        self.__class__ = ...
    def __iadd__(self, x):
        self.__class__ = ...
    def __imul__(self, x):
        self.__class__ = ...
    def pop(self, index):
        self.__class__ = ...
    def count(self, e):
        self.__class__ = ...
    def index(self, e):
        self.__class__ = ...
    def reverse(self):
        self.__class__ = ...
    def sort(self, key: Optional[Any] = ..., reverse: bool = ...):
        self.__class__ = ...
    def append(self, e):
        self.__class__ = ...
    def insert(self, index, e):
        self.__class__ = ...
    def extend(self, l):
        self.__class__ = ...
    def remove(self, e):
        self.__class__ = ...
    def clear(self):
        self.__class__ = ...

class Environment(object):
    __slots__ = ...
    def __init__(self):
        self.level = ...
    def __repr__(self): ...
    def __bool__(self): ...
    def __enter__(self): ...
    def __exit__(
        self,
        exc_type: Optional[Any] = ...,
        exc_val: Optional[Any] = ...,
        exc_tb: Optional[Any] = ...,
    ): ...
