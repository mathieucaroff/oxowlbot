"""
This type stub file was generated by pyright.
"""

import re
import logging
from stanza.protobuf import to_text
from typing import Any, Optional

"""
Client for accessing Stanford CoreNLP in Python
"""
__author__ = 'arunchaganty, kelvinguu, vzhong, wmonroe4'
logger = logging.getLogger('stanza')
SERVER_PROPS_TMP_FILE_PATTERN = re.compile('corenlp_server-(.*).props')
LANGUAGE_SHORTHANDS_TO_FULL = { "ar": "arabic","zh": "chinese","en": "english","fr": "french","de": "german","es": "spanish" }
LANGUAGE_DEFAULT_ANNOTATORS = { "arabic": "tokenize,ssplit,pos,parse","chinese": "tokenize,ssplit,pos,lemma,ner,parse,coref","english": "tokenize,ssplit,pos,lemma,ner,depparse","french": "tokenize,ssplit,pos,depparse","german": "tokenize,ssplit,pos,ner,parse","spanish": "tokenize,ssplit,pos,lemma,ner,depparse,kbp" }
ENGLISH_DEFAULT_REQUEST_PROPERTIES = { "annotators": "tokenize,ssplit,pos,lemma,ner,depparse","tokenize.language": "en","pos.model": "edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger","ner.model": "edu/stanford/nlp/models/ner/english.all.3class.distsim.crf.ser.gz," "edu/stanford/nlp/models/ner/english.muc.7class.distsim.crf.ser.gz," "edu/stanford/nlp/models/ner/english.conll.4class.distsim.crf.ser.gz","sutime.language": "english","sutime.rules": "edu/stanford/nlp/models/sutime/defs.sutime.txt," "edu/stanford/nlp/models/sutime/english.sutime.txt," "edu/stanford/nlp/models/sutime/english.holidays.sutime.txt","ner.applyNumericClassifiers": "true","ner.useSUTime": "true","ner.fine.regexner.mapping": "ignorecase=true,validpospattern=^(NN|JJ).*," "edu/stanford/nlp/models/kbp/english/gazetteers/regexner_caseless.tab;","edu/stanford/nlp/models/kbp/english/gazetteers/regexner_cased.tab" "ner.fine.regexner.noDefaultOverwriteLabels": "CITY","ner.language": "en","depparse.model": "edu/stanford/nlp/models/parser/nndep/english_UD.gz" }
class AnnotationException(Exception):
    """ Exception raised when there was an error communicating with the CoreNLP server. """
    ...


class TimeoutException(AnnotationException):
    """ Exception raised when the CoreNLP server timed out. """
    ...


class ShouldRetryException(Exception):
    """ Exception raised if the service should retry the request. """
    ...


class PermanentlyFailedException(Exception):
    """ Exception raised if the service should retry the request. """
    ...


class RobustService(object):
    """ Service that resuscitates itself if it is not available. """
    CHECK_ALIVE_TIMEOUT = ...
    def __init__(self, start_cmd, stop_cmd, endpoint, stdout=..., stderr=..., be_quiet: bool = ...):
        self.start_cmd = ...
        self.stop_cmd = ...
        self.endpoint = ...
        self.stdout = ...
        self.stderr = ...
        self.server = ...
        self.is_active = ...
        self.be_quiet = ...
    
    def is_alive(self):
        ...
    
    def start(self):
        ...
    
    def stop(self):
        self.is_active = ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, _, __, ___):
        ...
    
    def ensure_alive(self):
        self.is_active = ...
    


class CoreNLPClient(RobustService):
    """ A CoreNLP client to the Stanford CoreNLP server. """
    DEFAULT_ENDPOINT = ...
    DEFAULT_TIMEOUT = ...
    DEFAULT_THREADS = ...
    DEFAULT_ANNOTATORS = ...
    DEFAULT_OUTPUT_FORMAT = ...
    DEFAULT_MEMORY = ...
    DEFAULT_MAX_CHAR_LENGTH = ...
    DEFAULT_SERIALIZER = ...
    DEFAULT_INPUT_FORMAT = ...
    PIPELINE_LANGUAGES = ...
    def __init__(self, start_server: bool = ..., endpoint=..., timeout=..., threads=..., annotators: Optional[Any] = ..., properties: Optional[Any] = ..., output_format: Optional[Any] = ..., stdout=..., stderr=..., memory=..., be_quiet: bool = ..., max_char_length=..., preload: bool = ..., classpath: Optional[Any] = ..., **kwargs):
        self.properties_cache = ...
        self.server_props_file = ...
        self.timeout = ...
    
    def _setup_default_server_props(self, properties, annotators, output_format):
        """
        Set up the default properties for the server from either:

        1. File path on system or in CLASSPATH (e.g. /path/to/server.props or StanfordCoreNLP-french.properties
        2. Stanford CoreNLP supported language (e.g. french)
        3. Python dictionary (properties written to tmp file for Java server, erased at end)
        4. Default (just use standard defaults set server side in Java code, with the exception that the default
                    default outputFormat is changed to serialized)

        If defaults are being set client side, values of annotators and output_format will overwrite the
        client side properties.  If the defaults are being set server side, those parameters will be ignored.

        Info about the properties used to start the server is stored in self.server_start_info
        If a file is used, info about the file (path, whether tmp or not) is stored in self.server_props_file
        """
        self.server_start_info = ...
    
    def stop(self):
        ...
    
    def _request(self, buf, properties, **kwargs):
        """
        Send a request to the CoreNLP server.

        :param (str | bytes) buf: data to be sent with the request
        :param (dict) properties: properties that the server expects
        :return: request result
        """
        ...
    
    def register_properties_key(self, key, props):
        """ Register a properties dictionary with a key in the client's properties_cache """
        ...
    
    def annotate(self, text, annotators: Optional[Any] = ..., output_format: Optional[Any] = ..., properties_key: Optional[Any] = ..., properties: Optional[Any] = ..., **kwargs):
        """
        Send a request to the CoreNLP server.

        :param (str | unicode) text: raw text for the CoreNLPServer to parse
        :param (list | string) annotators: list of annotators to use
        :param (str) output_format: output type from server: serialized, json, text, conll, conllu, or xml
        :param (str) properties_key: key into properties cache for the client
        :param (dict) properties: additional request properties (written on top of defaults)

        The properties for a request are written in this order:

        1. Server default properties (server side)
        2. Properties from client's properties_cache corresponding to properties_key (client side)
           If the properties_key is the name of a Stanford CoreNLP supported language:
           [Arabic, Chinese, English, French, German, Spanish], the Stanford CoreNLP defaults will be used (server side)
        3. Additional properties corresponding to properties (client side)
        4. Special case specific properties: annotators, output_format (client side)

        :return: request result
        """
        ...
    
    def update(self, doc, annotators: Optional[Any] = ..., properties: Optional[Any] = ...):
        ...
    
    def tokensregex(self, text, pattern, filter: bool = ..., to_words: bool = ..., annotators: Optional[Any] = ..., properties: Optional[Any] = ...):
        ...
    
    def semgrex(self, text, pattern, filter: bool = ..., to_words: bool = ..., annotators: Optional[Any] = ..., properties: Optional[Any] = ...):
        ...
    
    def tregrex(self, text, pattern, filter: bool = ..., annotators: Optional[Any] = ..., properties: Optional[Any] = ...):
        ...
    
    def __regex(self, path, text, pattern, filter, annotators: Optional[Any] = ..., properties: Optional[Any] = ...):
        """
        Send a regex-related request to the CoreNLP server.
        :param (str | unicode) path: the path for the regex endpoint
        :param text: raw text for the CoreNLPServer to apply the regex
        :param (str | unicode) pattern: regex pattern
        :param (bool) filter: option to filter sentences that contain matches, if false returns matches
        :param properties: option to filter sentences that contain matches, if false returns matches
        :return: request result
        """
        ...
    


def read_corenlp_props(props_path):
    """ Read a Stanford CoreNLP properties file into a dict """
    ...

def write_corenlp_props(props_dict, file_path: Optional[Any] = ...):
    """ Write a Stanford CoreNLP properties dict to a file """
    ...

def regex_matches_to_indexed_words(matches):
    """
    Transforms tokensregex and semgrex matches to indexed words.
    :param matches: unprocessed regex matches
    :return: flat array of indexed words
    """
    ...

__all__ = ["CoreNLPClient", "AnnotationException", "TimeoutException", "to_text"]
