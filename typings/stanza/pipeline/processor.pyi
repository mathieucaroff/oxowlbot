"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod

"""
Base classes for processors
"""
class ProcessorRequirementsException(Exception):
    """ Exception indicating a processor's requirements will not be met """
    def __init__(self, processors_list, err_processor, provided_reqs):
        ...
    
    @property
    def err_processor(self):
        """ The processor that raised the exception """
        ...
    
    @property
    def processor_type(self):
        ...
    
    @property
    def processors_list(self):
        ...
    
    @property
    def provided_reqs(self):
        ...
    
    def build_message(self):
        self.message = ...
    
    def __str__(self):
        ...
    


class Processor(ABC):
    """ Base class for all processors """
    @abstractmethod
    def process(self, doc):
        """ Process a Document.  This is the main method of a processor. """
        ...
    
    def _set_up_provides(self):
        """ Set up what processor requirements this processor fulfills.  Default is to use a class defined list. """
        ...
    
    def _set_up_requires(self):
        """ Set up requirements for this processor.  Default is to use a class defined list. """
        ...
    
    @property
    def config(self):
        """ Configurations for the processor """
        ...
    
    @property
    def pipeline(self):
        """ The pipeline that this processor belongs to """
        ...
    
    @property
    def provides(self):
        ...
    
    @property
    def requires(self):
        ...
    
    def _check_requirements(self):
        """ Given a list of fulfilled requirements, check if all of this processor's requirements are met or not. """
        ...
    


class UDProcessor(Processor):
    """ Base class for the neural UD Processors (tokenize,mwt,pos,lemma,depparse) """
    def __init__(self, config, pipeline, use_gpu):
        ...
    
    @abstractmethod
    def _set_up_model(self, config, gpu):
        ...
    
    def _set_up_final_config(self, config):
        """ Finalize the configurations for this processor, based off of values from a UD model. """
        ...
    
    def mark_inactive(self):
        """ Drop memory intensive resources if keeping this processor around for reasons other than running it. """
        ...
    
    @property
    def pretrain(self):
        ...
    
    @property
    def trainer(self):
        ...
    
    @property
    def vocab(self):
        ...
    
    @staticmethod
    def filter_out_option(option):
        """ Filter out non-processor configurations """
        ...
    


