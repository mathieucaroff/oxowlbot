"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class Beam(object):
    def __init__(self, size, cuda: bool = ...):
        self.size = ...
        self.done = ...
        self.tt = ...
        self.scores = ...
        self.allScores = ...
        self.prevKs = ...
        self.nextYs = ...
        self.copy = ...
    
    def get_current_state(self):
        "Get the outputs for the current timestep."
        ...
    
    def get_current_origin(self):
        "Get the backpointers for the current timestep."
        ...
    
    def advance(self, wordLk, copy_indices: Optional[Any] = ...):
        """
        Given prob over words for every last beam `wordLk` and attention
        `attnOut`: Compute and update the beam search.

        Parameters:

        * `wordLk`- probs of advancing from the last step (K x words)
        * `copy_indices` - copy indices (K x ctx_len)

        Returns: True if beam search is complete.
        """
        self.scores = ...
    
    def sort_best(self):
        ...
    
    def get_best(self):
        "Get the score of the best in the beam."
        ...
    
    def get_hyp(self, k):
        """
        Walk back to construct the full hypothesis.

        Parameters:

             * `k` - the position in the beam to construct.

         Returns: The hypothesis
        """
        ...
    


