"""
This type stub file was generated by pyright.
"""

import re
from typing import Any, Optional

"""
Basic data structures
"""
multi_word_token_id = re.compile(r"([0-9]+)-([0-9]+)")
multi_word_token_misc = re.compile(r".*MWT=Yes.*")
ID = 'id'
TEXT = 'text'
LEMMA = 'lemma'
UPOS = 'upos'
XPOS = 'xpos'
FEATS = 'feats'
HEAD = 'head'
DEPREL = 'deprel'
DEPS = 'deps'
MISC = 'misc'
NER = 'ner'
START_CHAR = 'start_char'
END_CHAR = 'end_char'
TYPE = 'type'
class Document:
    """ A document class that stores attributes of a document and carries a list of sentences.
    """
    def __init__(self, sentences, text: Optional[Any] = ...):
        """ Construct a document given a list of sentences in the form of lists of CoNLL-U dicts.

        Args:
            sentences: a list of sentences, which being a list of token entry, in the form of a CoNLL-U dict.
            text: the raw text of the document.
        """
        self.text = ...
    
    @property
    def text(self):
        """ Access the raw text for this document. """
        ...
    
    @text.setter
    def text(self, value):
        """ Set the raw text for this document. """
        ...
    
    @property
    def sentences(self):
        """ Access the list of sentences for this document. """
        ...
    
    @sentences.setter
    def sentences(self, value):
        """ Set the list of tokens for this document. """
        ...
    
    @property
    def num_tokens(self):
        """ Access the number of tokens for this document. """
        ...
    
    @num_tokens.setter
    def num_tokens(self, value):
        """ Set the number of tokens for this document. """
        ...
    
    @property
    def num_words(self):
        """ Access the number of words for this document. """
        ...
    
    @num_words.setter
    def num_words(self, value):
        """ Set the number of words for this document. """
        ...
    
    @property
    def ents(self):
        """ Access the list of entities in this document. """
        ...
    
    @ents.setter
    def ents(self, value):
        """ Set the list of entities in this document. """
        ...
    
    @property
    def entities(self):
        """ Access the list of entities. This is just an alias of `ents`. """
        ...
    
    @entities.setter
    def entities(self, value):
        """ Set the list of entities in this document. """
        ...
    
    def _process_sentences(self, sentences):
        self.sentences = ...
        self.num_tokens = ...
        self.num_words = ...
    
    def get(self, fields, as_sentences: bool = ..., from_token: bool = ...):
        """ Get fields from a list of field names. If only one field name is provided, return a list
        of that field; if more than one, return a list of list. Note that all returned fields are after
        multi-word expansion.

        Args:
            fields: name of the fields as a list
            as_sentences: if True, return the fields as a list of sentences; otherwise as a whole list
            from_token: if True, get the fields from Token; otherwise from Word
        
        Returns:
            All requested fields.
        """
        ...
    
    def set(self, fields, contents, to_token: bool = ...):
        """ Set fields based on contents. If only one field (singleton list) is provided, then a list
        of content will be expected; otherwise a list of list of contents will be expected.

        Args:
            fields: name of the fields as a list
            contents: field values to set; total length should be equal to number of words/tokens
            to_token: if True, set field values to tokens; otherwise to words
        """
        ...
    
    def set_mwt_expansions(self, expansions):
        """ Extend the multi-word tokens annotated by tokenizer. A list of list of expansions
        will be expected for each multi-word token.
        """
        ...
    
    def get_mwt_expansions(self, evaluation: bool = ...):
        """ Get the multi-word tokens. For training, return a list of
        (multi-word token, extended multi-word token); otherwise, return a list of
        multi-word token only.
        """
        ...
    
    def build_ents(self):
        """ Build the list of entities by iterating over all words. Return all entities as a list. """
        self.ents = ...
    
    def iter_words(self):
        """ An iterator that returns all of the words in this Document. """
        ...
    
    def iter_tokens(self):
        """ An iterator that returns all of the tokens in this Document. """
        ...
    
    def to_dict(self):
        """ Dumps the whole document into a list of list of dictionary for each token in each sentence in the doc.
        """
        ...
    
    def __repr__(self):
        ...
    


class Sentence:
    """ A sentence class that stores attributes of a sentence and carries a list of tokens.
    """
    def __init__(self, tokens, doc: Optional[Any] = ...):
        """ Construct a setence given a list of tokens in the form of CoNLL-U dicts.
        """
        ...
    
    def _process_tokens(self, tokens):
        ...
    
    @property
    def doc(self):
        """ Access the parent doc of this span. """
        ...
    
    @doc.setter
    def doc(self, value):
        """ Set the parent doc of this span. """
        ...
    
    @property
    def text(self):
        """ Access the raw text for this sentence. """
        ...
    
    @text.setter
    def text(self, value):
        """ Set the raw text for this sentence. """
        ...
    
    @property
    def dependencies(self):
        """ Access list of dependencies for this sentence. """
        ...
    
    @dependencies.setter
    def dependencies(self, value):
        """ Set the list of dependencies for this sentence. """
        ...
    
    @property
    def tokens(self):
        """ Access the list of tokens for this sentence. """
        ...
    
    @tokens.setter
    def tokens(self, value):
        """ Set the list of tokens for this sentence. """
        ...
    
    @property
    def words(self):
        """ Access the list of words for this sentence. """
        ...
    
    @words.setter
    def words(self, value):
        """ Set the list of words for this sentence. """
        ...
    
    @property
    def ents(self):
        """ Access the list of entities in this sentence. """
        ...
    
    @ents.setter
    def ents(self, value):
        """ Set the list of entities in this sentence. """
        ...
    
    @property
    def entities(self):
        """ Access the list of entities. This is just an alias of `ents`. """
        ...
    
    @entities.setter
    def entities(self, value):
        """ Set the list of entities in this sentence. """
        ...
    
    def build_ents(self):
        """ Build the list of entities by iterating over all tokens. Return all entities as a list. 
        
        Note that unlike other attributes, since NER requires raw text, the actual tagging are always
        performed at and attached to the `Token`s, instead of `Word`s.
        """
        self.ents = ...
    
    def build_dependencies(self):
        """ Build the dependency graph for this sentence. Each dependency graph entry is
        a list of (head, deprel, word).
        """
        self.dependencies = ...
    
    def print_dependencies(self, file: Optional[Any] = ...):
        """ Print the dependencies for this sentence. """
        ...
    
    def dependencies_string(self):
        """ Dump the dependencies for this sentence into string. """
        ...
    
    def print_tokens(self, file: Optional[Any] = ...):
        """ Print the tokens for this sentence. """
        ...
    
    def tokens_string(self):
        """ Dump the tokens for this sentence into string. """
        ...
    
    def print_words(self, file: Optional[Any] = ...):
        """ Print the words for this sentence. """
        ...
    
    def words_string(self):
        """ Dump the words for this sentence into string. """
        ...
    
    def to_dict(self):
        """ Dumps the sentence into a list of dictionary for each token in the sentence.
        """
        ...
    
    def __repr__(self):
        ...
    


class Token:
    """ A token class that stores attributes of a token and carries a list of words. A token corresponds to a unit in the raw
    text. In some languages such as English, a token has a one-to-one mapping to a word, while in other languages such as French,
    a (multi-word) token might be expanded into multiple words that carry syntactic annotations.
    """
    def __init__(self, token_entry, words: Optional[Any] = ...):
        """ Construct a token given a dictionary format token entry. Optionally link itself to the corresponding words.
        """
        self.id = ...
        self.text = ...
        self.misc = ...
        self.ner = ...
        self.words = ...
    
    def init_from_misc(self):
        """ Create attributes by parsing from the `misc` field.
        """
        ...
    
    @property
    def id(self):
        """ Access the index of this token. """
        ...
    
    @id.setter
    def id(self, value):
        """ Set the token's id value. """
        ...
    
    @property
    def text(self):
        """ Access the text of this token. Example: 'The' """
        ...
    
    @text.setter
    def text(self, value):
        """ Set the token's text value. Example: 'The' """
        ...
    
    @property
    def misc(self):
        """ Access the miscellaneousness of this token. """
        ...
    
    @misc.setter
    def misc(self, value):
        """ Set the token's miscellaneousness value. """
        ...
    
    @property
    def words(self):
        """ Access the list of syntactic words underlying this token. """
        ...
    
    @words.setter
    def words(self, value):
        """ Set this token's list of underlying syntactic words. """
        ...
    
    @property
    def start_char(self):
        """ Access the start character index for this token in the raw text. """
        ...
    
    @property
    def end_char(self):
        """ Access the end character index for this token in the raw text. """
        ...
    
    @property
    def ner(self):
        """ Access the NER tag of this token. Example: 'B-ORG'"""
        ...
    
    @ner.setter
    def ner(self, value):
        """ Set the token's NER tag. Example: 'B-ORG'"""
        ...
    
    def __repr__(self):
        ...
    
    def to_dict(self, fields=...):
        """ Dumps the token into a list of dictionary for this token with its extended words
        if the token is a multi-word token.
        """
        ...
    
    def pretty_print(self):
        """ Print this token with its extended words in one line. """
        ...
    
    def _is_null(self, value):
        ...
    


class Word:
    """ A word class that stores attributes of a word.
    """
    def __init__(self, word_entry):
        """ Construct a word given a dictionary format word entry.
        """
        self.id = ...
        self.text = ...
        self.lemma = ...
        self.upos = ...
        self.xpos = ...
        self.feats = ...
        self.head = ...
        self.deprel = ...
        self.deps = ...
        self.misc = ...
    
    def init_from_misc(self):
        """ Create attributes by parsing from the `misc` field.
        """
        ...
    
    @property
    def id(self):
        """ Access the index of this word. """
        ...
    
    @id.setter
    def id(self, value):
        """ Set the word's index value. """
        ...
    
    @property
    def text(self):
        """ Access the text of this word. Example: 'The'"""
        ...
    
    @text.setter
    def text(self, value):
        """ Set the word's text value. Example: 'The'"""
        ...
    
    @property
    def lemma(self):
        """ Access the lemma of this word. """
        ...
    
    @lemma.setter
    def lemma(self, value):
        """ Set the word's lemma value. """
        ...
    
    @property
    def upos(self):
        """ Access the universal part-of-speech of this word. Example: 'NOUN'"""
        ...
    
    @upos.setter
    def upos(self, value):
        """ Set the word's universal part-of-speech value. Example: 'NOUN'"""
        ...
    
    @property
    def xpos(self):
        """ Access the treebank-specific part-of-speech of this word. Example: 'NNP'"""
        ...
    
    @xpos.setter
    def xpos(self, value):
        """ Set the word's treebank-specific part-of-speech value. Example: 'NNP'"""
        ...
    
    @property
    def feats(self):
        """ Access the morphological features of this word. Example: 'Gender=Fem'"""
        ...
    
    @feats.setter
    def feats(self, value):
        """ Set this word's morphological features. Example: 'Gender=Fem'"""
        ...
    
    @property
    def head(self):
        """ Access the id of the governer of this word. """
        ...
    
    @head.setter
    def head(self, value):
        """ Set the word's governor id value. """
        ...
    
    @property
    def deprel(self):
        """ Access the dependency relation of this word. Example: 'nmod'"""
        ...
    
    @deprel.setter
    def deprel(self, value):
        """ Set the word's dependency relation value. Example: 'nmod'"""
        ...
    
    @property
    def deps(self):
        """ Access the dependencies of this word. """
        ...
    
    @deps.setter
    def deps(self, value):
        """ Set the word's dependencies value. """
        ...
    
    @property
    def misc(self):
        """ Access the miscellaneousness of this word. """
        ...
    
    @misc.setter
    def misc(self, value):
        """ Set the word's miscellaneousness value. """
        ...
    
    @property
    def parent(self):
        """ Access the parent token of this word. In the case of a multi-word token, a token can be the parent of
        multiple words. Note that this should return a reference to the parent token object.
        """
        ...
    
    @parent.setter
    def parent(self, value):
        """ Set this word's parent token. In the case of a multi-word token, a token can be the parent of
        multiple words. Note that value here should be a reference to the parent token object.
        """
        ...
    
    @property
    def pos(self):
        """ Access the universal part-of-speech of this word. Example: 'NOUN'"""
        ...
    
    @pos.setter
    def pos(self, value):
        """ Set the word's universal part-of-speech value. Example: 'NOUN'"""
        ...
    
    def __repr__(self):
        ...
    
    def to_dict(self, fields=...):
        """ Dumps the word into a dictionary.
        """
        ...
    
    def pretty_print(self):
        """ Print the word in one line. """
        ...
    
    def _is_null(self, value):
        ...
    


class Span:
    """ A span class that stores attributes of a textual span. A span can be typed.
    A range of objects (e.g., entity mentions) can be represented as spans.
    """
    def __init__(self, span_entry: Optional[Any] = ..., tokens: Optional[Any] = ..., type: Optional[Any] = ..., doc: Optional[Any] = ..., sent: Optional[Any] = ...):
        """ Construct a span given a span entry or a list of tokens. A valid reference to a doc
        must be provided to construct a span (otherwise the text of the span cannot be initialized).
        """
        ...
    
    def init_from_entry(self, span_entry):
        self.text = ...
        self.type = ...
        self.start_char = ...
        self.end_char = ...
    
    def init_from_tokens(self, tokens, type):
        self.tokens = ...
        self.type = ...
        self.start_char = ...
        self.end_char = ...
        self.text = ...
        self.words = ...
    
    @property
    def doc(self):
        """ Access the parent doc of this span. """
        ...
    
    @doc.setter
    def doc(self, value):
        """ Set the parent doc of this span. """
        ...
    
    @property
    def text(self):
        """ Access the text of this span. Example: 'Stanford University'"""
        ...
    
    @text.setter
    def text(self, value):
        """ Set the span's text value. Example: 'Stanford University'"""
        ...
    
    @property
    def tokens(self):
        """ Access reference to a list of tokens that correspond to this span. """
        ...
    
    @tokens.setter
    def tokens(self, value):
        """ Set the span's list of tokens. """
        ...
    
    @property
    def words(self):
        """ Access reference to a list of words that correspond to this span. """
        ...
    
    @words.setter
    def words(self, value):
        """ Set the span's list of words. """
        ...
    
    @property
    def type(self):
        """ Access the type of this span. Example: 'PERSON'"""
        ...
    
    @type.setter
    def type(self, value):
        """ Set the type of this span. """
        ...
    
    @property
    def start_char(self):
        """ Access the start character offset of this span. """
        ...
    
    @start_char.setter
    def start_char(self, value):
        """ Set the start character offset of this span. """
        ...
    
    @property
    def end_char(self):
        """ Access the end character offset of this span. """
        ...
    
    @end_char.setter
    def end_char(self, value):
        """ Set the end character offset of this span. """
        ...
    
    def to_dict(self):
        """ Dumps the span into a dictionary. """
        ...
    
    def __repr__(self):
        ...
    
    def pretty_print(self):
        """ Print the span in one line. """
        ...
    


