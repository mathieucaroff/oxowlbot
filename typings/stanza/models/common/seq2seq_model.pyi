"""
This type stub file was generated by pyright.
"""

import logging
from torch import nn
from typing import Any, Optional

"""
The full encoder-decoder model, built on top of the base seq2seq modules.
"""
logger = logging.getLogger('stanza')
class Seq2SeqModel(nn.Module):
    """
    A complete encoder-decoder model, with optional attention.
    """
    def __init__(self, args, emb_matrix: Optional[Any] = ..., use_cuda: bool = ...):
        self.vocab_size = ...
        self.emb_dim = ...
        self.hidden_dim = ...
        self.nlayers = ...
        self.emb_dropout = ...
        self.dropout = ...
        self.pad_token = ...
        self.max_dec_len = ...
        self.use_cuda = ...
        self.top = ...
        self.args = ...
        self.emb_matrix = ...
        self.num_directions = ...
        self.enc_hidden_dim = ...
        self.dec_hidden_dim = ...
        self.use_pos = ...
        self.pos_dim = ...
        self.pos_vocab_size = ...
        self.pos_dropout = ...
        self.edit = ...
        self.num_edit = ...
        self.emb_drop = ...
        self.drop = ...
        self.embedding = ...
        self.encoder = ...
        self.decoder = ...
        self.dec2vocab = ...
        self.SOS_tensor = ...
        self.SOS_tensor = ...
    
    def init_weights(self):
        ...
    
    def cuda(self):
        self.use_cuda = ...
    
    def cpu(self):
        self.use_cuda = ...
    
    def zero_state(self, inputs):
        ...
    
    def encode(self, enc_inputs, lens):
        """ Encode source sequence. """
        ...
    
    def decode(self, dec_inputs, hn, cn, ctx, ctx_mask: Optional[Any] = ...):
        """ Decode a step, based on context encoding and source context states."""
        ...
    
    def forward(self, src, src_mask, tgt_in, pos: Optional[Any] = ...):
        ...
    
    def get_log_prob(self, logits):
        ...
    
    def predict(self, src, src_mask, pos: Optional[Any] = ..., beam_size=...):
        """ Predict with beam search. """
        ...
    


