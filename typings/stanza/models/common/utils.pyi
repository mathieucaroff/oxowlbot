"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""
Utility functions.
"""
def get_wordvec_file(wordvec_dir, shorthand):
    """ Lookup the name of the word vectors file, given a directory and the language shorthand.
    """
    ...

def get_adaptive_eval_interval(cur_dev_size, thres_dev_size, base_interval):
    """ Adjust the evaluation interval adaptively.
    If cur_dev_size <= thres_dev_size, return base_interval;
    else, linearly increase the interval (round to integer times of base interval).
    """
    ...

def ud_scores(gold_conllu_file, system_conllu_file):
    ...

def harmonic_mean(a, weights: Optional[Any] = ...):
    ...

def get_optimizer(name, parameters, lr, betas=..., eps=..., momentum=...):
    ...

def change_lr(optimizer, new_lr):
    ...

def flatten_indices(seq_lens, width):
    ...

def set_cuda(var, cuda):
    ...

def keep_partial_grad(grad, topk):
    """
    Keep only the topk rows of grads.
    """
    ...

def ensure_dir(d, verbose: bool = ...):
    ...

def save_config(config, path, verbose: bool = ...):
    ...

def load_config(path, verbose: bool = ...):
    ...

def print_config(config):
    ...

def normalize_text(text):
    ...

def unmap_with_copy(indices, src_tokens, vocab):
    """
    Unmap a list of list of indices, by optionally copying from src_tokens.
    """
    ...

def prune_decoded_seqs(seqs):
    """
    Prune decoded sequences after EOS token.
    """
    ...

def prune_hyp(hyp):
    """
    Prune a decoded hypothesis
    """
    ...

def prune(data_list, lens):
    ...

def sort(packed, ref, reverse: bool = ...):
    """
    Sort a series of packed list, according to a ref list.
    Also return the original index before the sort.
    """
    ...

def unsort(sorted_list, oidx):
    """
    Unsort a sorted list, based on the original idx.
    """
    ...

def tensor_unsort(sorted_tensor, oidx):
    """
    Unsort a sorted tensor on its 0-th dimension, based on the original idx.
    """
    ...

