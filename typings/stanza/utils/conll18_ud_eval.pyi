"""
This type stub file was generated by pyright.
"""

import unittest

CONTENT_DEPRELS = "nsubj", "obj", "iobj", "csubj", "ccomp", "xcomp", "obl", "vocative", "expl", "dislocated", "advcl", "advmod", "discourse", "nmod", "appos", "nummod", "acl", "amod", "conj", "fixed", "flat", "compound", "list", "parataxis", "orphan", "goeswith", "reparandum", "root", "dep"
FUNCTIONAL_DEPRELS = "aux", "cop", "mark", "det", "clf", "case", "cc"
UNIVERSAL_FEATURES = "PronType", "NumType", "Poss", "Reflex", "Foreign", "Abbr", "Gender", "Animacy", "Number", "Case", "Definite", "Degree", "VerbForm", "Mood", "Tense", "Aspect", "Voice", "Evident", "Polarity", "Person", "Polite"
class UDError(Exception):
    ...


def _decode(text):
    ...

def _encode(text):
    ...

def load_conllu(file):
    class UDRepresentation:
        ...
    
    
    class UDSpan:
        ...
    
    
    class UDWord:
        ...
    
    

def evaluate(gold_ud, system_ud):
    class Score:
        ...
    
    
    class AlignmentWord:
        ...
    
    
    class Alignment:
        ...
    
    

def load_conllu_file(path):
    ...

def evaluate_wrapper(args):
    ...

def main():
    ...

if __name__ == "__main__":
    ...
class TestAlignment(unittest.TestCase):
    @staticmethod
    def _load_words(words):
        """Prepare fake CoNLL-U files with fake HEAD to prevent multiple roots errors."""
        ...
    
    def _test_exception(self, gold, system):
        ...
    
    def _test_ok(self, gold, system, correct):
        ...
    
    def test_exception(self):
        ...
    
    def test_equal(self):
        ...
    
    def test_equal_with_multiword(self):
        ...
    
    def test_alignment(self):
        ...
    


