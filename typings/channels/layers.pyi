"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class ChannelLayerManager:
    """
    Takes a settings dictionary of backends and initialises them on request.
    """
    def __init__(self):
        self.backends = ...
    
    def _reset_backends(self, setting, **kwargs):
        """
        Removes cached channel layers when the CHANNEL_LAYERS setting changes.
        """
        ...
    
    @property
    def configs(self):
        ...
    
    def make_backend(self, name):
        """
        Instantiate channel layer.
        """
        ...
    
    def make_test_backend(self, name):
        """
        Instantiate channel layer using its test config.
        """
        ...
    
    def _make_backend(self, name, config):
        ...
    
    def __getitem__(self, key):
        ...
    
    def __contains__(self, key):
        ...
    
    def set(self, key, layer):
        """
        Sets an alias to point to a new ChannelLayerWrapper instance, and
        returns the old one that it replaced. Useful for swapping out the
        backend during tests.
        """
        ...
    


class BaseChannelLayer:
    """
    Base channel layer class that others can inherit from, with useful
    common functionality.
    """
    def __init__(self, expiry=..., capacity=..., channel_capacity: Optional[Any] = ...):
        self.expiry = ...
        self.capacity = ...
        self.channel_capacity = ...
    
    def compile_capacities(self, channel_capacity):
        """
        Takes an input channel_capacity dict and returns the compiled list
        of regexes that get_capacity will look for as self.channel_capacity
        """
        ...
    
    def get_capacity(self, channel):
        """
        Gets the correct capacity for the given channel; either the default,
        or a matching result from channel_capacity. Returns the first matching
        result; if you want to control the order of matches, use an ordered dict
        as input.
        """
        ...
    
    def match_type_and_length(self, name):
        ...
    
    channel_name_regex = ...
    group_name_regex = ...
    invalid_name_error = ...
    def valid_channel_name(self, name, receive: bool = ...):
        ...
    
    def valid_group_name(self, name):
        ...
    
    def valid_channel_names(self, names, receive: bool = ...):
        ...
    
    def non_local_name(self, name):
        """
        Given a channel name, returns the "non-local" part. If the channel name
        is a process-specific channel (contains !) this means the part up to
        and including the !; if it is anything else, this means the full name.
        """
        ...
    


class InMemoryChannelLayer(BaseChannelLayer):
    """
    In-memory channel layer implementation
    """
    def __init__(self, expiry=..., group_expiry=..., capacity=..., channel_capacity: Optional[Any] = ..., **kwargs):
        self.channels = ...
        self.groups = ...
        self.group_expiry = ...
    
    extensions = ...
    async def send(self, channel, message):
        """
        Send a message onto a (general or specific) channel.
        """
        ...
    
    async def receive(self, channel):
        """
        Receive the first message that arrives on the channel.
        If more than one coroutine waits on the same channel, a random one
        of the waiting coroutines will get the result.
        """
        ...
    
    async def new_channel(self, prefix=...):
        """
        Returns a new channel name that can be used by something in our
        process as a specific channel.
        """
        ...
    
    def _clean_expired(self):
        """
        Goes through all messages and groups and removes those that are expired.
        Any channel with an expired message is removed from all groups.
        """
        ...
    
    async def flush(self):
        self.channels = ...
        self.groups = ...
    
    async def close(self):
        ...
    
    def _remove_from_groups(self, channel):
        """
        Removes a channel from all groups. Used when a message on it expires.
        """
        ...
    
    async def group_add(self, group, channel):
        """
        Adds the channel name to a group.
        """
        ...
    
    async def group_discard(self, group, channel):
        ...
    
    async def group_send(self, group, message):
        ...
    


def get_channel_layer(alias=...):
    """
    Returns a channel layer by alias, or None if it is not configured.
    """
    ...

channel_layers = ChannelLayerManager()
