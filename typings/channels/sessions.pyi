"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class CookieMiddleware:
    """
    Extracts cookies from HTTP or WebSocket-style scopes and adds them as a
    scope["cookies"] entry with the same format as Django's request.COOKIES.
    """
    def __init__(self, inner):
        self.inner = ...
    
    def __call__(self, scope):
        ...
    
    @classmethod
    def set_cookie(cls, message, key, value=..., max_age: Optional[Any] = ..., expires: Optional[Any] = ..., path=..., domain: Optional[Any] = ..., secure: bool = ..., httponly: bool = ...):
        """
        Sets a cookie in the passed HTTP response message.

        ``expires`` can be:
        - a string in the correct format,
        - a naive ``datetime.datetime`` object in UTC,
        - an aware ``datetime.datetime`` object in any time zone.
        If it is a ``datetime.datetime`` object then ``max_age`` will be calculated.
        """
        ...
    
    @classmethod
    def delete_cookie(cls, message, key, path=..., domain: Optional[Any] = ...):
        """
        Deletes a cookie in a response.
        """
        ...
    


class SessionMiddleware:
    """
    Class that adds Django sessions (from HTTP cookies) to the
    scope. Works with HTTP or WebSocket protocol types (or anything that
    provides a "headers" entry in the scope).

    Requires the CookieMiddleware to be higher up in the stack.
    """
    save_message_types = ...
    cookie_response_message_types = ...
    def __init__(self, inner):
        self.inner = ...
        self.cookie_name = ...
        self.session_store = ...
    
    def __call__(self, scope):
        ...
    


class SessionMiddlewareInstance:
    """
    Inner class that is instantiated once per scope.
    """
    def __init__(self, scope, middleware):
        self.middleware = ...
        self.scope = ...
        self.inner = ...
    
    async def __call__(self, receive, send):
        """
        We intercept the send() callable so we can do session saves and
        add session cookie overrides to send back.
        """
        self.real_send = ...
    
    async def send(self, message):
        """
        Overridden send that also does session saves/cookies.
        """
        ...
    
    def save_session(self):
        """
        Saves the current session.
        """
        ...
    


SessionMiddlewareStack = lambda inner: CookieMiddleware(SessionMiddleware(inner))
