"""
This type stub file was generated by pyright.
"""

from django.utils.functional import LazyObject
from channels.db import database_sync_to_async
from channels.middleware import BaseMiddleware
from channels.sessions import CookieMiddleware, SessionMiddleware
from typing import Any, Optional

@database_sync_to_async
def get_user(scope):
    """
    Return the user model instance associated with the given scope.
    If no user is retrieved, return an instance of `AnonymousUser`.
    """
    ...

@database_sync_to_async
def login(scope, user, backend: Optional[Any] = ...):
    """
    Persist a user id and a backend in the request.
    This way a user doesn't have to re-authenticate on every request.
    Note that data set during the anonymous session is retained when the user logs in.
    """
    ...

@database_sync_to_async
def logout(scope):
    """
    Remove the authenticated user's ID from the request and flush their session data.
    """
    ...

def _get_user_session_key(session):
    ...

class UserLazyObject(LazyObject):
    """
    Throw a more useful error message when scope['user'] is accessed before it's resolved
    """
    def _setup(self):
        ...
    


class AuthMiddleware(BaseMiddleware):
    """
    Middleware which populates scope["user"] from a Django session.
    Requires SessionMiddleware to function.
    """
    def populate_scope(self, scope):
        ...
    
    async def resolve_scope(self, scope):
        ...
    


AuthMiddlewareStack = lambda inner: CookieMiddleware(SessionMiddleware(AuthMiddleware(inner)))
