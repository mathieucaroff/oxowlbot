"""
This type stub file was generated by pyright.
"""

from asgiref.testing import ApplicationCommunicator  # type: ignore
from typing import Any, Optional

class WebsocketCommunicator(ApplicationCommunicator):
    """
    ApplicationCommunicator subclass that has WebSocket shortcut methods.

    It will construct the scope for you, so you need to pass the application
    (uninstantiated) along with the initial connection parameters.
    """

    def __init__(
        self,
        application,
        path,
        headers: Optional[Any] = ...,
        subprotocols: Optional[Any] = ...,
    ):
        self.scope = ...
    async def connect(self, timeout=...):
        """
        Trigger the connection code.

        On an accepted connection, returns (True, <chosen-subprotocol>)
        On a rejected connection, returns (False, <close-code>)
        """
        ...
    async def send_to(
        self, text_data: Optional[Any] = ..., bytes_data: Optional[Any] = ...
    ):
        """
        Sends a WebSocket frame to the application.
        """
        ...
    async def send_json_to(self, data):
        """
        Sends JSON data as a text frame
        """
        ...
    async def receive_from(self, timeout=...):
        """
        Receives a data frame from the view. Will fail if the connection
        closes instead. Returns either a bytestring or a unicode string
        depending on what sort of frame you got.
        """
        ...
    async def receive_json_from(self, timeout=...):
        """
        Receives a JSON text frame payload and decodes it
        """
        ...
    async def disconnect(self, code=..., timeout=...):
        """
        Closes the socket
        """
        ...
