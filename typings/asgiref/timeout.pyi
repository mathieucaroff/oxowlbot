"""
This type stub file was generated by pyright.
"""

import asyncio
import sys
from types import TracebackType
from typing import Any, Optional, Type

PY_37 = sys.version_info >= (3, 7)
class timeout:
    """timeout context manager.

    Useful in cases when you want to apply timeout logic around block
    of code or in cases when asyncio.wait_for is not suitable. For example:

    >>> with timeout(0.001):
    ...     async with aiohttp.get('https://github.com') as r:
    ...         await r.text()


    timeout - value in seconds or None to disable timeout logic
    loop - asyncio compatible event loop
    """
    def __init__(self, timeout: Optional[float], *, loop: Optional[asyncio.AbstractEventLoop] = ...) -> None:
        ...
    
    def __enter__(self) -> timeout:
        ...
    
    def __exit__(self, exc_type: Type[BaseException], exc_val: BaseException, exc_tb: TracebackType) -> Optional[bool]:
        ...
    
    async def __aenter__(self) -> timeout:
        ...
    
    async def __aexit__(self, exc_type: Type[BaseException], exc_val: BaseException, exc_tb: TracebackType) -> None:
        ...
    
    @property
    def expired(self) -> bool:
        ...
    
    @property
    def remaining(self) -> Optional[float]:
        ...
    
    def _do_enter(self) -> timeout:
        ...
    
    def _do_exit(self, exc_type: Type[BaseException]) -> None:
        ...
    
    def _cancel_task(self) -> None:
        ...
    


def current_task(loop: asyncio.AbstractEventLoop) -> asyncio.Task[Any]:
    ...

